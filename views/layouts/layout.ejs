<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <title>Edellcation</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />

    <meta
      name="description"
      content="O Edellcation é uma plataforma web da Dell que oferece acesso fácil a materiais técnicos e manuais de montagem para funcionários das linhas de montagem, ajudando-os a estudar e acompanhar processos atualizados de montagem de produtos como computadores, servidores e notebooks."
    />

    <meta name="robots" content="noindex" />
    <!-- Esta tag faz com que este site não seja encontrado pelos buscadores  -->

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <!-- Renderiza o header só se não for a tela de login -->
    <% if (req.path !== '/entrar') { if (req.session.isEngineer) { %>
    <!-- Header para usuários administradores -->
    <header>
      <div>
        <a href="/engenheiro">
          <img
            src="\images\DellTechnologiesLogo.png"
            alt="Logotipo da Dell Technologies"
          />
        </a>
      </div>

      <nav style="margin-right: 120px">
        <ul>
          <li>
            <a
              href="/engenheiro"
              class="<%= req.path === '/engenheiro' ? 'actualPageNav' : '' %>"
              >Início</a
            >
          </li>
          <li>
            <a
              href="/manuais"
              class="<%= req.path === '/manuais' ? 'actualPageNav' : '' %>"
              >Manuais</a
            >
          </li>
          <li>
            <a
              href="/engenheiro/linhas"
              class="<%= req.path === '/engenheiro/linhas' ? 'actualPageNav' : '' %>"
              >Linhas</a
            >
          </li>
        </ul>
      </nav>

      <nav>
        <ul>
          <li>
            <a
              href="/perfil"
              class="<%= req.path === '/perfil' ? 'actualPageNav' : '' %>"
              ><img src="/images/icons/userCir.svg" alt="Ícone de Perfil"
            /></a>
          </li>
        </ul>
      </nav>
    </header>
    <% } else { %>

    <!-- Header para usuários comuns -->
    <header>
      <div>
        <a href="/">
          <img
            src="\images\DellTechnologiesLogo.png"
            alt="Logotipo da Dell Technologies"
          />
        </a>
      </div>

      <nav>
        <ul>
          <li>
            <a href="/" class="<%= req.path === '/' ? 'actualPageNav' : '' %>"
              >Início</a
            >
          </li>
          <li>
            <a
              href="/manuais/tarefas"
              class="<%= req.path === '/manuais/tarefas' ? 'actualPageNav' : '' %>"
              >Tarefas</a
            >
          </li>
          <li>
            <a
              href="/manuais"
              class="<%= req.path === '/manuais' ? 'actualPageNav' : '' %>"
              >Manuais</a
            >
          </li>
          <li>
            <a
              href="/manuais/favoritos"
              class="<%= req.path === '/manuais/favoritos' ? 'actualPageNav' : '' %>"
              >Favoritos</a
            >
          </li>
        </ul>
      </nav>

      <nav>
        <ul>
          <li>
            <a
              href="/manuais/pesquisa"
              class="<%= req.path === '/manuais/pesquisa' ? 'actualPageNav' : '' %>"
              ><img src="/images/icons/search.svg" alt="Ícone de Pesquisa"
            /></a>
          </li>
          <li>
            <a
              href="/perfil"
              class="<%= req.path === '/perfil' ? 'actualPageNav' : '' %>"
              ><img src="/images/icons/userCir.svg" alt="Ícone de Perfil"
            /></a>
          </li>
        </ul>
      </nav>
    </header>
    <% } %> <% } %> <%- body %> <% if (req.path !== '/entrar') { %>
    <footer>
      <img src="/images/icons/brandDell.svg" alt="Logotipo da Dell" />
    </footer>
    <% } %>

    <!--
                      Client-side Templates
                      ========================
                      
                      HTML templates are important prerequisites of modern, rich client applications.
                      To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
                      require that you load these templates client-side.
                      
        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->

    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
